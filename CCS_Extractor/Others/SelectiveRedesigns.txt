	public static void selective() {
		ConfigExtract cur, past;
		
		File f = new File("Enumerations/Redesigns.txt");
		File nf = new File("Enumerations/MoveNerf.txt");
		File bf = new File("Enumerations/MoveBuff.txt");
		File sf = new File("Enumerations/OtherSel.txt");
		SelectiveRedesignWikitable bufftable = new SelectiveRedesignWikitable();
		SelectiveRedesignWikitable nerftable = new SelectiveRedesignWikitable();
		
		int buff = 0;
		int nerf = 0;
		int oth = 0;
		try {
			PrintWriter pw = new PrintWriter(f);
			PrintWriter n = new PrintWriter(nf);
			PrintWriter b = new PrintWriter(bf);
			PrintWriter s = new PrintWriter(sf);
			BufferedWriter bw = new BufferedWriter(pw);
			BufferedWriter bn = new BufferedWriter(n);
			BufferedWriter bb = new BufferedWriter(b);
			BufferedWriter bs = new BufferedWriter(s);
			for (int ep = 1; ep <= Navigation.LAST_CONFIG; ep++) {
				for (int lvl = 1; lvl <= Navigation.epLength(ep); lvl++) {
					try {
						cur = ConfigExtract.extract("", ep, lvl);
					} catch (ExtractException e) {
						System.out.printf("%d-%d does not have a cur version!\n", ep, lvl);
						cur = null;
					}
					try {
						past = ConfigExtract.extract("past/", ep, lvl);
					}
					catch (ExtractException e) {
						System.out.printf("%d-%d does not have a past version!\n", ep, lvl);
						past = null;
					}
					if (cur != null && past != null) {
						int changes = -1;
						if (ConfigExtract.redesigned(cur, past))
							changes = generateRedesigns(bw, cur, (ConfigExtract) past, ep, lvl);
						
						Config curConfig = new Config(cur);
						curConfig.setEp(ep);
						curConfig.setLvl(lvl);
						Config pastConfig = new Config(past);
						pastConfig.setEp(ep);
						pastConfig.setLvl(lvl);
						if (changes >= 1 && curConfig.getMoves() == pastConfig.getMoves() || changes > 1)  {
							subRedesigns(bs, curConfig, pastConfig, ep, lvl, " selectively redesigned");
							oth++;
						}
						else if (curConfig.getMoves() > pastConfig.getMoves()) {
							moveTable(nerftable, curConfig, pastConfig, ep, lvl, " nerfed");
							nerf++;
						}
						else if (curConfig.getMoves() < pastConfig.getMoves()) {
							moveTable(bufftable, curConfig, pastConfig, ep, lvl, " buffed");
							buff++;
						}
					}
				}
			} // End of for loop
			nerftable.close();
			bufftable.close();
			bn.write(nerftable.toString());
			bb.write(bufftable.toString());
			bw.close();
			bn.close();
			bb.close();
			bs.close();
			System.out.println(count + "," + boardcount);
			System.out.println(nerf + "," + oth + " levels selectively nerfed");
			System.out.println(buff + " levels selectively buffed");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**Helper function to write data regarding redesigned configs.
	 * @param bw
	 * @param cur
	 * @param past
	 * @param ep
	 * @param lvl
	 * @return
	 */
	static int generateRedesigns(BufferedWriter bw, 
			ConfigExtract cur, ConfigExtract past, int ep, int lvl) {
		Config curConfig, pastConfig;
		try {
			curConfig = new Config(cur);
			curConfig.setEp(ep);
			curConfig.setLvl(lvl);
			pastConfig = new Config(past);
			pastConfig.setEp(ep);
			pastConfig.setLvl(lvl);
			boolean boardRedesigned = Config.boardRedesigned(curConfig, pastConfig);
			if (boardRedesigned)
				boardcount++;
			count++;
			
			//System.out.println(ep + "-" + lvl + (boardRedesigned?" Board":"") + " Redesigned");
			
			RedesignData rd = new RedesignData(curConfig, pastConfig);
			bw.write(String.format("Episode %03d-%02d ([[Level %d]]) Redesigned (%d)\n", 
					curConfig.getEp(), curConfig.getLvl(), curConfig.totalLevel(), rd.changedValues()));
			bw.write(rd + "\n");
			return rd.changedValues();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return -1;
	}
	
	static void subRedesigns(BufferedWriter bw, 
			Config cur, Config past, int ep, int lvl, String change) {
		try {
			boolean boardRedesigned = Config.boardRedesigned(cur, past);
			
			//System.out.println(ep + "-" + lvl + (boardRedesigned?" Board":"") + change);
			
			RedesignData rd = new RedesignData(cur, past);
			bw.write(String.format("Episode %03d-%02d ([[Level %d]]) Redesigned (%d)\n", 
					cur.getEp(), cur.getLvl(), cur.totalLevel(), rd.changedValues()));
			bw.write(rd + "\n");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	static void moveTable(SelectiveRedesignWikitable wt, Config cur, Config past, int ep, int lvl,
			String change) {
		boolean boardRedesigned = Config.boardRedesigned(cur, past);

		System.out.println(ep + "-" + lvl + (boardRedesigned ? " Board" : "") + "");
		int curMoves = cur.getMoves();
		int pastMoves = past.getMoves();

		WikitableEntry diff = new WikitableEntry("");
		diff.setFormat(String.format("style=\"background-color:{{B|%d}};\"", 
				cur.totalLevel()));
		wt.addEntry(diff);
		wt.addEntry(String.format("E%03d-%02d", ep, lvl));
		wt.addEntry(String.format("[[Level %d|%d]]", cur.totalLevel(), cur.totalLevel()));
		wt.addEntry(String.format("%d", pastMoves));
		wt.addEntry(String.format("'''%d'''", curMoves));
		wt.addEntry(new RatioEntry((float) curMoves / pastMoves));
		wt.addRow();
	}
	
	static class SelectiveRedesignWikitable extends Wikitable {
		private StringBuilder sourceCode;
		
		public SelectiveRedesignWikitable() {
			this.sourceCode = new StringBuilder();
			this.sourceCode.append("<div style=\"font-size:10pt; font-family:monospace\">\n");
			this.sourceCode.append("{| class=\"wikitable sortable\" style=\"line-height: 10pt\"\n");
			this.addUnsortable(8, "");
			this.addHeader(96, "Episode");
			this.addHeader(96, "Level");
			this.addHeader(96, "PAST");
			this.addHeader(128, "SEL");
			this.addHeader(96, "PCT");
			this.addRow();
		}
		
		@Override
		public void addRow() {
			this.sourceCode.append("\n|-\n");
		}
		
		public void close() {
			this.sourceCode.append("|}</div>\n");
		}

		@Override
		public void addEntry(WikitableEntry entry) {
			this.sourceCode.append(entry.toString());
		}
		
		public void addHeader(int width, String name) {
			this.sourceCode.append("! scope=col style=\"width: " + width + "px\"|" + Wikitable.bold(name) + "\n");
		}
		
		public void addUnsortable(int width, String name) {
			this.sourceCode.append("! class=\"unsortable\" scope=col style=\"width: " + width + "px\"|" + name + "\n");
		}
		
		public void addEntry(String entry) {
			this.sourceCode.append(new WikitableEntry(entry));
		}

		@Override
		public String toString() {
			return this.sourceCode.toString();
		}
	}
	
	static class RatioEntry extends WikitableEntry {
		public RatioEntry(double pct) {
			super(String.format("%.1f", pct*100));
			this.setColor(pct);
		}
		
		/**Algorithm to determine tile color based on amount of ingredients.
		 * The color transitions from white to green.
		 * It is a 4-color system, from almost #FFFFFF at 99, to #FFCCFF at 20, 
		 * to FF00FF at 10, and finally to FF0066 at 1.
		 * @param The initial timer of all bombs that spawn on the board.
		 */
		private void setColor(double pct) {
			int r = 255;
			int g = 255;
			int b = 255;
			short severe = 0;
			if (pct < 0.25) {
				r = 0; g = 0; b = 0;
				severe = 2;
			}
			else if (pct < 0.40) {
				r = 0; g = 0; b = 0;
				severe = 1;
			}
			else if (pct < 0.50) {
				r = 255; g = 0; b = 0;
			}
			else if (pct < 0.60) {
				r = 255; g = 128; b = 0;
			}
			else if (pct < 0.75) {
				r = 255; g = 192; b = 0;
			}
			else if (pct < 0.90) {
				r = 255; g = 255; b = 0;
			}
			else if (pct < 1) {
				r = 255; g = 255; b = 128;
			}
			else
				return;
			String style = "background:" + getHexColor(r, g, b);
			if (severe == 2)
				style += ";color:red";
			else if (severe == 1)
				style += ";color:white";
			String format = styleCode(style);
			this.setFormat(format);
		}
		
		/**Algorithm to convert the color values into formatted hexadecimal form
		 * in the form #NNNNNN.
		 * @return The hex code for that color based on the component values.
		 */
		public String getHexColor(int r, int g, int b) {
			// Use .toHexString to convert each integer value into a hex String.
			// Format the String to #NNNNN form. Note that .toHexString does
			// not use leading ones, so if this happens, spaces will occur.
			// Replace all spaces with zeros to form a leading zero.
			String hexColor =  String.format("#%02X%02X%02X", r, g, b);
			return hexColor;
		}
	}